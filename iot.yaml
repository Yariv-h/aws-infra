Description: |
  Creates lambda functions for Reactive LEDs via AWS IoT. https://github.com/rbirkby/aws-infra

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: reative-leds-service-role
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: write-to-reactive-leds-queue
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action: iot:Publish
            Resource: !Sub arn:aws:iot:eu-west-1:${AWS::AccountId}:topic/commands

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          'use strict';

          var AWS = require('aws-sdk');
          var iotdata = new AWS.IotData({endpoint: 'a2wkex2gd7mljx.iot.eu-west-1.amazonaws.com'});

          exports.skill = (event, context, callback) => {
              // Prevent unauthorized skills using this lambda function
              if (event.session.application.applicationId !== 'amzn1.ask.skill.d8c73870-1487-46c0-a715-ba78589f2f31') {
                  callback('Invalid Application ID');
              }

              if (event.request.type === "IntentRequest") {
                  var newVisualization = event.request.intent.slots.Visualization.value;
                  if (['spectrum', 'energy', 'scroll'].indexOf(newVisualization) > -1) {
                      var params = {
                          topic: 'commands',
                          payload: JSON.stringify({message: newVisualization}),
                          qos: 0
                      };

                      // Publish the command via AWS IoT mqtt message queue
                      iotdata.publish(params, (err, data) => {
                          if(err) {
                              console.log(`Unable to switch lights to ${newVisualization}`, err);
                              callback(err)
                          } else {
                              // Respond to the Echo with the results
                              callback(null, {
                                  version: "1.0",
                                  sessionAttributes: event.session.attributes,
                                  response: {
                                      outputSpeech: {
                                          type: "PlainText",
                                          text: `Lights to ${newVisualization}`
                                      },
                                      shouldEndSession: true
                                  }
                              });

                              console.log(`Successfully switched lights to ${newVisualization}`);
                              context.succeed(event);
                          }
                      });
                  } else {
                      callback(`Unknown visualization ${newVisualization}`);
                  }
              }
          };

      Description: Connect Alexa to Reactive LEDs
      FunctionName: visualization-skill
      Handler: index.skill
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs4.3
      Timeout: 60

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      Action: lambda:InvokeFunction
      Principal: alexa-appkit.amazon.com

  IotDevice:
    Type: AWS::IoT::Thing
    Properties:
      ThingName: ReactiveLeds

  IotDeviceSecurity:
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties:
      Principal: !Sub arn:aws:iot:eu-west-1:${AWS::AccountId}:cert/690eaa3ebc8377d8e2c959a3499df4c619b4b3b6b38b55d02906d4a4ca0c66f9
      ThingName: !Ref IotDevice

  IotPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Action:
              - iot:Publish
              - iot:Subscribe
              - iot:Connect
              - iot:Receive
          Resource: "*"
          Effect: Allow
      PolicyName: reactiveleds-policy

  IotSecurityPolicy:
    Type: AWS::IoT::PolicyPrincipalAttachment
    Properties:
      Principal: !Sub arn:aws:iot:eu-west-1:${AWS::AccountId}:cert/690eaa3ebc8377d8e2c959a3499df4c619b4b3b6b38b55d02906d4a4ca0c66f9
      PolicyName: !Ref IotPolicy
